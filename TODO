Graph-Easy
==========

See Graph::Easy under LIMITATIONS for some hot topics.

In addition:

Important short-term TODO:

* missing edges sometimes do not result in an error message
* Node::Empty need to render their right/bottom border if their
  right/bottom neighbour also has a border
* unplacing edge-crossings does not work, leaving stray edge crossings
* implement HTML nodes as triangles, house, etc. using slanted edges
* define missing HTML edge cells (selfloops, corners and CROSS w. end/start
  points)
* as_html(): output of node-clusters is slightly wrong
* as_html(): output of crossings with different styles is wrong
* as_html(): there is no space between two nodes placed next (with filler
	     cell) to each other. Make filler cells output a &nbsp;
* Non-existant cells in a node-cluster are handled different than empty
  ones (f.i. at the end of one row)
* put framebuffer related routines into own package (Graph::Easy::As_ascii)
  to avoid the dilemma that we need them from both Node and Graph.
* as_html(): output of groups is not optimal (Group::Cells needs overhaul)

Parser:

* edge parsing " -- test \>-->" => "test >" as edge label
* deal with " -> [ node ], [node2], [node3]"
* parse nested graphs
* support for node splitting ala:

    "[ A ] | [ B | C ] || [ D | E ]"

* support for attribute lists on autosplit nodes ala:

    "[ A || B | C ] { background: red|blue|green; }"

* use "{}" to nest blocks?
* Nodes with both "|" and "\|" in their name are not parsed correctly
* handle RGB colors with percentages or fractions like: rgb(100%,50%,0.5)
* quoting of "[" and "{" inside edge labels ala:

  [ A ] -- label \[ 8 ] --> [ B ]

Output:

* selfloop edges should counter the general flow:

                    Until not done
                  +----------------+
                  v                |
  +-------+     +--------------------+     +-----+
  | Start | --> | Main               | --> | End |
  +-------+     +--------------------+     +-----+

  versus (loop still going left):

                  Until not done
                +----------------+
                v                |
  +-----+     +--------------------+     +-------+
  | End | <-- | Main               | <-- | Start |
  +-----+     +--------------------+     +-------+

* write as_box(): output with box-drawing chars (unicode or iso)
* support different edge starting point styles ala:

  ----->  |----->  o----->  +----->  *----->  >----->

* as_txt(): output of node clusters is not optimal
* as_txt(): output of node chains is not optimal
* as_ascii(): render dotted nodes with ":" on their lower corners
* as_ascii(): output group borders and group labels
* better support for different shapes (circle, box, rounded, polygon etc)
  in ASCII
* support "border-style: double" together with fill colors graphviz
* need better support for different edge styles in Graphviz
* as_ascii() and others: grow cells around point-shaped nodes to intrude:

	...........................
        :      :  |   :     :     :
	:      :  |   :     :     :
	:      :  v   :     :     :
	...........................
        :       :   :       :     :
	:-----> : * : <---- :     :
        :       :   :       :     :
	...........................

Layout:

* the longest-chain code (walk recursively children of startig node) needs
  some tuning, especially when it encounters loops in the graph.
* allow user to specify max graph width (in cells) to avoid overly wide graphs
* auto-grow nodes to be multicelled depending on the dimensions of their label
  ("main page" gets 2x1, while "a \nb \nc \nd \ne \n" gets 1x2 cells)
  This currently causes problems and wierd layouts.
* Use the seed to generate randomized layouts
* allow user to specify on an edge:
    direction: (up|down|left|right|north|south|west|east|0|90|180|270|360);
    flow: (up|down|left|right|north|south|west|east|0|90|180|270|360);
  to force or suggest direction of edges leaving a node
* allow user to specifiy "align: left, top;" or "align: center, middle" to
  specify alignment of labels. (left|right|center|middle|top|bottom)
* add margin/padding attributes (especially usefull for HTML output)
* the A* algorithm needs fine-tuning to generate less bendy paths

Optimizer:

* write an optimizer for already laid out graphs to optimize layout
* less memory: store border and edge styles as ints instead of "solid" etc
* use AUTOLOAD for accessors in Node.pm: most are never used by normal code
* edges_to() is the new hot-spot. It could be faster if we keep track of
  edges per node indexed by their target, too.

Manual:

* finish the POD to HTML conversion (Graph::Easy::Pod2HTML)

